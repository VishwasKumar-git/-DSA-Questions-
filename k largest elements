Question Link: https://www.geeksforgeeks.org/problems/k-largest-elements4206/1

//java 
public ArrayList<Integer> kLargest(int[] arr, int k) {
        // Your code here
        // Arrays.sort(arr);
        // ArrayList<Integer> res=new ArrayList<Integer>();
        // int cnt=k;
        // for(int i=arr.length-1; i>=0; i--){
        //     if(cnt>0){
        //         if(arr[i]!=arr[i-1]){
        //             res.add(arr[i]);
        //             cnt--;
        //         }
        //     }
        // }
        // return res;
        
        
        // PriorityQueue<Integer> pq=new PriorityQueue<>();
        // for(int i=0;i<k;i++){
        //     pq.add(arr[i]);
        // }
        // for(int i=0; i<arr.length; i++){
        //     if(pq.peek()<arr[i]){
        //         pq.poll();
        //         pq.add(arr[i]);
        //     }
        // }
        // ArrayList<Integer> res=new ArrayList<>();
        // int i=k-1;
        // while (pq.size()!=0){
        //     // res[i]=pq.peek();
        //     // i--;
        //     // pq.poll();
        //     res.add(pq.peek());
        //     pq.poll();
        //     i--;
        // }
        // Collections.reverse(res);
        // return res;
        
        
        
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        for (int x : arr) {
            pq.offer(x);
            if (pq.size() > k) {
                pq.poll(); // Keep only the k largest
            }
        }

        ArrayList<Integer> res = new ArrayList<>();
        while (!pq.isEmpty()) {
            res.add(pq.poll());
        }
        Collections.reverse(res); // Important: Reverse for descending order
        return res;
    }




//c++
vector<int> kLargest(vector<int>& arr, int k) {
    priority_queue<int, vector<int>, greater<int>> pq; // Min-heap

    for (int x : arr) {
        pq.push(x);
        if (pq.size() > k) {
            pq.pop();
        }
    }

    vector<int> res;
    while (!pq.empty()) {
        res.push_back(pq.top());
        pq.pop();
    }
    reverse(res.begin(), res.end()); // Reverse for descending order
    return res;
}
